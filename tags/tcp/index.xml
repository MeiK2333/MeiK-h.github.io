<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TCP on MeiK's blog</title><link>https://meik2333.com/tags/tcp/</link><description>Recent content in TCP on MeiK's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Theme by &lt;a href='https://github.com/MeiK2333/github-style'>github-style&lt;/a></copyright><lastBuildDate>Tue, 02 Jul 2024 01:57:53 +0000</lastBuildDate><atom:link href="https://meik2333.com/tags/tcp/index.xml" rel="self" type="application/rss+xml"/><item><title>TCP 的拥塞控制</title><link>https://meik2333.com/post/tcp-congestion-control/</link><pubDate>Sun, 16 Sep 2018 19:56:47 +0000</pubDate><guid>https://meik2333.com/post/tcp-congestion-control/</guid><description>&lt;p>TCP 的拥塞控制主要由慢启动、拥塞避免、快重传和快恢复四部分组成。&lt;/p>
&lt;p>Google 开源了新的拥塞控制算法 BBR，在实际应用中体验优于传统算法，但还没有得到普及。现在互联网上大部分的设备还是传统算法，因此传统的 TCP 的拥塞控制还有很有学习的必要的。&lt;/p></description></item><item><title>TCP 的滑动窗口</title><link>https://meik2333.com/post/tcp-sliding-window/</link><pubDate>Sat, 15 Sep 2018 15:35:53 +0000</pubDate><guid>https://meik2333.com/post/tcp-sliding-window/</guid><description>&lt;p>作为一个可靠的连接，TCP 应该尽力使得数据送达，即当有数据报丢失的话，TCP 应该有某种机制来得知丢失的部分并重传。这个机制就是滑动窗口。&lt;/p>
&lt;p>滑动窗口是 TCP 连接中重要的一个部分，TCP 连接的两端通过滑动窗口来动态的调节数据的发送与接收，以保证数据被正确接收而不会因为过多的发送而被淹没；还可以在数据报丢失的时候进行重传，以尽力使数据送达。&lt;/p></description></item><item><title>TCP 连接的流程与状态转换</title><link>https://meik2333.com/post/tcp-status/</link><pubDate>Sun, 19 Aug 2018 14:07:05 +0000</pubDate><guid>https://meik2333.com/post/tcp-status/</guid><description>&lt;p>TCP 为一个连接定义了 11 种状态，并且规定了如何基于当前的状态及在该状态下接收的分节从一个状态转换到另一个状态。&lt;/p></description></item><item><title>TCP 的三次握手与四次挥手</title><link>https://meik2333.com/post/tcp-connection/</link><pubDate>Fri, 17 Aug 2018 20:48:23 +0000</pubDate><guid>https://meik2333.com/post/tcp-connection/</guid><description>&lt;p>TCP 协议提供了可靠的传输，但是网络是不可靠的，TCP 也无法保证数据一定会被对方接收，这是不可能做到的。TCP 实际提供的是数据的可靠递送或故障的可靠通知。&lt;/p>
&lt;p>建立一个 TCP 连接需要进行三次握手，而终止一个 TCP 连接需要进行四次挥手。这篇博客就介绍一下关于 TCP 的三次握手与四次挥手与其他一些信息吧。&lt;/p></description></item></channel></rss>